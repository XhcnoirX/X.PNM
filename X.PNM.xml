<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-64) 2018.1.5 (Build 659_0_20788U)" ts="2024-07-25 11:43:57">
<Class name="X.PNM">
<Description>
Library to create PNM (Portable Anymap) images, of sub-formats PBM (Portable Bitmap), PGM (Portable Graymap), and PPM (Portable Pixmap).</Description>
<Super>%RegisteredObject</Super>
<TimeChanged>67046,42207.49638</TimeChanged>
<TimeCreated>67044,71699.588978</TimeCreated>

<Property name="Type">
<Type>%String</Type>
<Private>1</Private>
<Parameter name="VALUELIST" value=",P1,P2,P3,P4,P5,P6"/>
</Property>

<Property name="Width">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="Height">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="MaxVal">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="Data">
<Type>%DynamicArray</Type>
<Private>1</Private>
</Property>

<Method name="%OnNew">
<FormalSpec>format:%String="PPM",plain:%Boolean=0,maxval:%Integer=255,width:%Integer=10,height:%Integer=10</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if '..SetFormat(format, plain, maxval) quit 0
	if '..SetSize(width, height) quit 0
	set ..Width = width
	set ..Height = height
	set ..Data = []
	quit 1
]]></Implementation>
</Method>

<Method name="SetFormat">
<FormalSpec>format:%String="PPM",plain:%Boolean=0,maxval:%Integer=255</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set format = $zconvert(format, "U")
	if format="PPM" {
		set ..Type = $case(plain,0:"P6",:"P3")
		if maxval>255 set maxval = 255
		set ..MaxVal = maxval
		quit 1
	}
	elseif format="PGM" {
		set ..Type = $case(plain,0:"P5",:"P2")
		if maxval>255 set maxval = 255
		set ..MaxVal = maxval
		quit 1
	}
	elseif format="PBM" {
		set ..Type = $case(plain,0:"P4",:"P1")
		set ..MaxVal = 1
		quit 1
	}
	do ..Error("Format " _ format _ " not supported!")
	quit 0
]]></Implementation>
</Method>

<Method name="SetSize">
<FormalSpec>width:%Integer=10,height:%Integer=10</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if (width<=0) || (height<=0) quit 0
	set ..Width = width
	set ..Height = height
	quit 1
]]></Implementation>
</Method>

<Method name="AddLine">
<FormalSpec>pixels:%DynamicArray</FormalSpec>
<Implementation><![CDATA[
	if pixels.%Size()'=..Width {
		do ..Error("Line length is not " _ ..Width _ "!")
	}
	set iter = pixels.%GetIterator()
	while iter.%GetNext(.key, .pixel) {
		do ..Data.%Push(pixel)
	}
]]></Implementation>
</Method>

<Method name="AddPixel">
<Description>
color2 and color3 only supported for PPM (P3/P6)
In which case color1, color2, color3 represent the Red, Green and Blue parts of the pixel color respectively</Description>
<FormalSpec>color1:%Integer,color2:%Integer,color3:%Integer</FormalSpec>
<Implementation><![CDATA[
	set pixel = []
	do pixel.%Push(color1)
	if (..Type="P3") || (..Type="P6") {
		do pixel.%Push(color2)
		do pixel.%Push(color3)
	}
	do ..Data.%Push(pixel)
]]></Implementation>
</Method>

<Method name="AddPixelAt">
<Description>
color2 and color3 only supported for PPM (P3/P6)
In which case color1, color2, color3 represent the Red, Green and Blue parts of the pixel color respectively</Description>
<FormalSpec>x:%Integer,y:%Integer,color1:%Integer,color2:%Integer,color3:%Integer</FormalSpec>
<Implementation><![CDATA[
	set pixel = []
	do pixel.%Push(color1)
	if (..Type="P3") || (..Type="P6") {
		do pixel.%Push(color2)
		do pixel.%Push(color3)
	}
	do ..Data.%Set(y*..Width + x, pixel)
]]></Implementation>
</Method>

<Method name="Save">
<FormalSpec>file:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// make sure Data size (= pixel count) is correct
	if ..Data.%Size()'=(..Width * ..Height) {
		do ..Error("Invalid pixel size: " _ ..Data.%Size() _ ", should be " _ (..Width * ..Height) _ "!")
	}
	if ##class(%File).Exists(file) {
		do ..Error("File already exists!")
	}
	set stream = ##class(%Stream.FileCharacter).%New()
	set status = stream.LinkToFile(file)
	do stream.Rewind()
	do stream.WriteLine(..Type)
	do stream.WriteLine(..Width _ " " _..Height)
	if (..Type'="P1") && (..Type'="P4") do stream.Write(..MaxVal)
	if +$E(..Type, 2)<4 {
		do ..SavePlain(.stream)
	}
	else {
		// For PBM, a conversion from bits to bytes is needed
		//if ..Type="P4" do ..ConvertToBytes()
		do ..SaveBinary(.stream)
	}
	do stream.WriteLine("")
	do stream.%Save()
	do stream.%Close()
	quit $$$OK
]]></Implementation>
</Method>

<Method name="SavePlain">
<FormalSpec><![CDATA[&stream]]></FormalSpec>
<Implementation><![CDATA[
	do stream.WriteLine()
	set pos = 0
	set line = ""
	set Iter = ..Data.%GetIterator()
	while Iter.%GetNext(.pos, .pixel) {
		if $l(line)>=59 {
			do stream.WriteLine(line)
			set line = ""
		}
		if (..Type="P3") || (..Type="P6") {
			set line = line _ pixel.%Get(0) _ " " _ pixel.%Get(1) _ " " _ pixel.%Get(2) _ " "
		}
		else {
			set line = line _ pixel.%Get(0) _ " "
		}
	}
	if $l(line) do stream.WriteLine(line)
	quit
]]></Implementation>
</Method>

<Method name="SaveBinary">
<FormalSpec><![CDATA[&stream]]></FormalSpec>
<Implementation><![CDATA[
	set pos = 0
	set Iter = ..Data.%GetIterator()
	while Iter.%GetNext(.pos, .pixel) {
		if (..Type="P3") || (..Type="P6") {
			do stream.Write($char(pixel.%Get(0)) _ $char(pixel.%Get(1)) _ $char(pixel.%Get(2)))
		}
		else {
			do stream.Write($char(pixel.%Get(0)))
		}
	}
	quit
]]></Implementation>
</Method>

<Method name="ConvertToBytes">
<Implementation><![CDATA[
	set Temp = []
	set byte = 0
	set mult = 256
	set Iter = ..Data.%GetIterator()
	while Iter.%GetNext(.pos, .pixel) {
		set byte = byte + mult*pixel.%Get(0)
		if mult=1 {
			do Temp.%Push(byte)
			set mult = 256
			set byte = 0
		}
		else {
			set mult = mult/2
		}
	}
	do Temp.%Push(byte)
	set ..Data = Temp
]]></Implementation>
</Method>

<Method name="Error">
<FormalSpec>error:%String</FormalSpec>
<Implementation><![CDATA[
	set $zerror = error
	throw
]]></Implementation>
</Method>
</Class>
</Export>
